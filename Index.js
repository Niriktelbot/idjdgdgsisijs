let transactions = require("./transactions"); // –≥–æ–≤–Ω–æ–∫–æ–¥
const util = require("./util");
const request = require('request');
const fs = require("fs");
const stata = require('./stata.json')
const mongo = require("mongoose");
mongo.connect("");
const QIWI = require("node-qiwi-api").Qiwi;
const wallet = new QIWI("");
const admins = [''];
const User			=		mongo.model("CreatorUser", new mongo.Schema({
	id: Number,
	balance: Number,
	pbalance: Number,
	refbalance: Number,
	bot: Number,
	tb: String,
	cb: String,
	ab: String,
	sb: String,
	pb: Number,
	verif: Number,
	ref: Number,
	menu: String,
	kick: Number,
	adminmenu: String,
	prfUser: String,
	regDate: String,
}));
const Ticket		=		mongo.model("CreatorTicket", new mongo.Schema({
	owner: Number,
	wallet: String,
	pay: String,
	amount: Number
}));
const Bot		=		mongo.model("CreatorBot", new mongo.Schema({
	owner: Number,
	bot: String
}));
const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"1826189540:AAFZx2HX4S0jOw1RhYKkhTTp8dQ0ihubPr0", // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
);
setInterval(async () => {
wallet.getOperationHistory({
rows: 3,
operation: "IN"
}, async (err, res) => {
res.data.map(async (operation) => {
if(transactions.indexOf(operation.txnId) !== -1) return;
if(!operation.comment) return;
if(!Number(operation.comment)) return;
let user = await User.findOne({ id: operation.comment });
if(!user) return;
bot.sendMessage(user.id, `
‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á—ë—Ç –Ω–∞ ${operation.sum.amount}RUB.`);
bot.sendMessage('le govnokod', `
üìí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É: ${operation.sum.amount}‚ÇΩ –æ—Ç <a href="tg://user?id=${user.id}">–∏–≥—Ä–æ–∫–∞</a>
–ü–°: Qiwi`, {
				parse_mode: "HTML"
			});
			await User.findOneAndUpdate({ id: user.id }, { $inc: { balance: operation.sum.amount } })
transactions.push(operation.txnId);
require("fs").writeFileSync("./transactions.json", JSON.stringify(transactions, null, "\t"));
let ref = await User.findOne({ id: Number(user.ref) });
			if(!ref) return;
await User.findOneAndUpdate({ id: user.ref }, { $inc: { refbalance: operation.sum.amount*0.15,refz: operation.sum.amount*0.15 } })
bot.sendMessage(user.ref, `
üìí –í–∞—à <a href="tg://user?id=${user.id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª <b>${operation.sum.amount}</b>, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <b>15%</b>.`, {
				parse_mode: "HTML"
			});
});
});
}, 10000);
const keyboards		=		{
	main: [
		["üíº –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞","ü§ñ –ú–æ–∏ –±–æ—Ç—ã"],
		["üì≤ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç","üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã"],
		["üìí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
	],
	cancel: [
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	admin: [
		["üïπ –†–∞—Å—Å—ã–ª–∫–∞","–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è"],
		["üí∏ –ë–∞–ª–∞–Ω—Å", "üí≥ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
		["‚õîÔ∏è –ë–∞–Ω","‚úÖ –î–æ—Å—Ç—É–ø"],
		["üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥","üîä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
		["üîô –ù–∞—á–∞–ª–æ","üÜî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
	]
}
bot.on("message", async (message) => {
		message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	User.findOne({ id: message.from.id }).then(async ($user) => {
		if($user) return;

				let schema = {
			id: message.from.id,
			balance: 0,
			pbalance: 0,
			refbalance: 0,
			ref: 0,
			verif: 0,
			tb: "",
			ab: "",
			sb: "",
			cb: "",
			pb: 0,
			bot: 0,
			refz: 0,
			kick: 0,
			menu: "",
			adminmenu: "",
			prfUser: "",
			regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`,
		}
							if(Number(message.text.split("/start ")[1])) {
			schema.ref		=		Number(message.text.split("/start ")[1]);
									let user = new User(schema);
			await user.save();
				await message.send(`ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ @MCreator_bot - —ç—Ç–æ –±–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞, –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.

üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –±—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã, —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞.

–ï—Å–ª–∏ —Ç—ã –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –Ω–µ –∑–Ω–∞–ª –∫–∞–∫? –¢–æ –¥—É–º–∞—é –º—ã - —ç—Ç–æ —Ç–≤–æ–π –≤—ã—Ö–æ–¥.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª üíº –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
					let ref = await User.findOne({ id: Number(message.text.split("/start ")[1]) });
					await User.findOneAndUpdate({ id: message.from.id }, { $set: { ref: ref.id } })
			bot.sendMessage(Number(message.text.split("/start ")[1]), `üë§ –£ –í–∞—Å –Ω–æ–≤—ã–π <a href="tg://user?id=${message.from.id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ!`, {
				parse_mode: "HTML"
			})
			return
			}
		let user = new User(schema);
		await user.save();
	});
	message.user = await User.findOne({ id: message.from.id });
		if(message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞—á–∞–ª–æ") {
	
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { adminmenu: "" } })

		return message.send(`üñ•`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

if(message.text === "/start") {
		await message.send(`üñ•`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}
	
										if(message.user.menu.startsWith("enterAmount")) {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ <b>${message.user.refbalance.toFixed(2)}‚ÇΩ</b>`,{ parse_mode: "HTML" });

			let wallet = (message.user.menu.split("_")[1]);
            let platc = (message.user.menu.split("_")[2]);
			if(message.text > message.user.refbalance) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ <b>${message.user.refbalance.toFixed(2)}‚ÇΩ</b>`,{ parse_mode: "HTML" });
			if(message.text < 5) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ <b>${message.user.refbalance.toFixed(2)}‚ÇΩ</b>`,{ parse_mode: "HTML" });
			
			else if(message.text <= message.user.refbalance) {
				let ticket = new Ticket({
					owner: message.from.id,
					pay: platc,
					wallet: wallet,
					amount: message.text
				});
	await User.findOneAndUpdate({ id: message.user.id }, { $inc: { refbalance: -message.text } })
				await ticket.save();
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
admins.map((x) => bot.sendMessage(x, `
üíµ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç <a href="tg://user?id=${ticket.owner}">–∏–≥—Ä–æ–∫–∞</a>
üìî –°—É–º–º–∞: <code>${ticket.amount}</code> ‚ÇΩ
üì§ –ü–ª–∞—Ç–µ–∂–∫–∞: <b>${platc}</b>
üí∞ –ö–æ—à–µ–ª—ë–∫: <code>${ticket.wallet}</code>
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
							[{ text: "‚úÖ", callback_data: `awithdraw_${ticket.owner}_${platc}` },{ text: "üö´", callback_data: `declineback${ticket.owner}` }],
					]
				}
			}));
					
				return message.send(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞.`, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

if(message.user.menu === "inve") {
			message.text = Math.floor(Number(message.text));
			if(!Number(message.text) || message.text < 5) {
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
				return message.send(`‚Å†‚Å†üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ 5‚ÇΩ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!`) }
				if(message.text > message.user.refbalance) {
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
				return message.send(`‚Å†‚Å†üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!`, {
	parse_mode: "HTML",
	reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
				}) }
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
await User.findOneAndUpdate({ id: message.user.id }, { $inc: { balance: message.text } })
await User.findOneAndUpdate({ id: message.user.id }, { $inc: { refbalance: -message.text } })
			return message.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏: <b>${message.user.refbalance}‚ÇΩ</b>`, {
	parse_mode: "HTML",
	reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
				});
			}

		if(message.user.menu.startsWith("qiwi")) {
			
			message.text = message.text;
			let plat = (message.user.menu.split("qiwi")[1]);
			console.log(plat)
			await message.user.set("menu", "enterAmount_" + message.text + plat);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ <b>${message.user.refbalance.toFixed(2)}‚ÇΩ</b>`,{ parse_mode: "HTML" });
		}
	
				if(message.user.menu === "token") {
					bot.deleteMessage(message.chat.id, message.message_id)
 await User.findOneAndUpdate({ id: message.user.id }, { $set: { tb: message.text } })
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
			await message.send(`‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω`,{reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}});
			}
			
							if(message.user.menu === "chenel") {
bot.deleteMessage(message.chat.id, message.message_id)
								await User.findOneAndUpdate({ id: message.user.id }, { $set: { cb: message.text } })
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
			await message.send(`‚úÖ –ß–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω`,{reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}});
			}
										if(message.user.menu === "proc") {
											bot.deleteMessage(message.chat.id, message.message_id)
											let proc = message.text
if(proc > 7 || proc != Number(proc) || proc === 0 || proc < 1) { await message.send(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7`,{reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}}); 
return User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })}
 await User.findOneAndUpdate({ id: message.user.id }, { $set: { pb: proc } })
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
			await message.send(`‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω`,{reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}});
			}
			
							if(message.user.menu === "admin") {
								bot.deleteMessage(message.chat.id, message.message_id)
 await User.findOneAndUpdate({ id: message.user.id }, { $set: { ab: message.text } })
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "" } })
			await message.send(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω`,{reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}});
			}
	
	if(message.text === "üì≤ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç") {
		return message.send(`
		üì≤ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç:
		
üÜî –í–∞—à ID: <code>${message.chat.id}</code>
ü§ñ –í–∞—à–∏—Ö –±–æ—Ç–æ–≤: <b>${message.user.bot}</b>
üë§ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${message.user.refz.toFixed(2)}‚ÇΩ</b>

üí∞ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: <b>${message.user.refbalance.toFixed(2)}‚ÇΩ</b>
üí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${message.user.balance.toFixed(2)}‚ÇΩ</b>`, {
			reply_markup: {
				inline_keyboard: [
						[
							{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: `popol` },
						    { text: "üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data: `rviv` }
						],
												[
							{ text: "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: `rein` },
						],
						]
			},
			parse_mode: "HTML"
		});
	}
		if(message.text === "üíº –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞") {
		return message.send(`
		ü§ñ<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –±–æ—Ç:</b>

‚ùó<em>Ô∏è –ü–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞, —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ</em>

<b>–ù–µ –∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∫–∞–∂–¥—ã–π —à–∞–≥ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω.</b>`, {
			reply_markup: {
				inline_keyboard: [
						[
							{ text: "‚ìÇ ML Robot", callback_data: `ml` },
						],
						]
			},
			parse_mode: "HTML"
		});
	}
	if(message.text === "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã") {
		let lvl1		=		await User.find({ ref: message.from.id });	
		return message.send(`üë• <em>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
–î–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª —Å–µ–±–µ –±–æ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç 15% –æ—Ç –∑–∞–∫–∞–∑–∞. –í—Å–µ —á–∏—Å—Ç–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫.</em>

üë§ –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:

1 —É—Ä–æ–≤–µ–Ω—å - ${lvl1.length} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - ${message.user.refz.toFixed(2)}‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/TgBotsCreator_bot?start=${message.user.id}

üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:
15% –æ—Ç –∑–∞–∫–∞–∑–∞!

üí∞ –ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ - —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ! –£–¥–∞—á–∏! `, {
			parse_mode: "HTML"
		});
		}
				if(message.text === "üìí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
		return message.send(`
		üìí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`, {
			reply_markup: {
				inline_keyboard: [
						[
							{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", callback_data: `stata` },
						],
						[
							{ text: "üîä –ù–æ–≤–æ—Å—Ç–∏", url: `t.me/marussia_r` },
							{ text: "üëÅ –û—Ç–∑—ã–≤—ã", url: `t.me/marussia_c` },
						],
						[
						{ text: "üó£ –ß–∞—Ç –ê–¥–º–∏–Ω–æ–≤ üõ°", callback_data: `chat` },
							{ text: "üë©üèº‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: `tex` },
						],						
						]
			},
			parse_mode: "HTML"
		});
	}
	if(message.text === "ü§ñ –ú–æ–∏ –±–æ—Ç—ã") {
		if(message.user.bot === 0) { return message.send(`ü§ñ <b>–£ –≤–∞—Å –±–æ—Ç–æ–≤: 0</b>

‚ö† –£ –≤–∞—Å –Ω–µ—Ç –±–æ—Ç–æ–≤, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª
üíº <b>–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞</b>

<em>–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏.</em> `,{parse_mode: "HTML"}) }

			var bbtn = [{ text: `‚è∫ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞`, callback_data: `zapusk` }]
		if (message.user.tb === "") { return message.send(`<b>‚öô –ì–ª–∞–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>
<b>–ë–æ—Ç:</b> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω
<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> ${message.from.first_name.replace(/(\<|\>)/g, '')}

<b>–ß–∞—Ç:</b> ${c}
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> ${a}
<b>–¢–æ–∫–µ–Ω:</b> ${t}
<b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> ${p}

<em>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö.</em>  `,{reply_markup: {
				inline_keyboard: [
						[
							{ text: "üì∞ –ß–∞—Ç", callback_data: `chenel` },
							{ text: "üßëüèº‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data: `admin` },
						],
						[
						{ text: "üíé –ü—Ä–æ—Ü–µ–Ω—Ç", callback_data: `proc` },
							{ text: "üîí –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data: `token` },
						],	
bbtn						
						]
			},
			parse_mode: "HTML"})  }
	else {
		const first			=		new Telegram(
	`${message.user.tb}`, // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
) 
let rt = ``
first.getMe().then(r =>
message.send(`<b>‚öô –ì–ª–∞–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:</b>
<b>–ë–æ—Ç:</b> @${r.username}
<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> ${message.from.first_name.replace(/(\<|\>)/g, '')}

<b>–ß–∞—Ç:</b> ${c}
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç
<b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> ${p}

<em>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö.</em>  `,{reply_markup: {
				inline_keyboard: [
						[
							{ text: "üì∞ –ß–∞—Ç", callback_data: `chenel` },
							{ text: "üßëüèº‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data: `admin` },
						],
						[
						{ text: "üíé –ü—Ä–æ—Ü–µ–Ω—Ç", callback_data: `proc` },
							{ text: "üîí –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data: `token` },
						],	
bbtn						
						]
			},
			parse_mode: "HTML"}))  }
		
			return
	}
})
	bot.on("callback_query", async (query) => {
	
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });
	if(query.data.startsWith("popol")) {
							
					bot.deleteMessage(message.chat.id, message.message_id)

				return bot.sendMessage(message.chat.id,`
		üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

üíµ <em>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: @codershark</em>
`, {
		reply_markup: {
						inline_keyboard: [
							[{ text: "QIWI", callback_data: `qiwi` }],
						]
					},
parse_mode: "HTML"
});
		}
				if(query.data.startsWith("stata")) {
			bot.deleteMessage(message.chat.id, message.message_id)
				let _twoUser = stata.filter(x => x.id === 'le govnokod')[0]
				return bot.sendMessage(message.chat.id,`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:

üïú –†–∞–±–æ—Ç–∞–µ–º –¥–Ω–µ–π: ${_twoUser.days}

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${_twoUser.polz}
üë®üèº‚Äç‚úà –£ –Ω–∞—Å –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: ${_twoUser.zarabot}
üöÄ –ë–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞–Ω–æ: ${_twoUser.bots}

<em>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤</em>`, {
parse_mode: "HTML"
});
		}
		if(query.data.startsWith("pmlp")) {
			if (message.user.balance < 1000) return bot.answerCallbackQuery(query.id, `‚ùó –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${1000-message.user.balance}‚ÇΩ
			
			–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –í–∞—à –±–∞–ª–∞–Ω—Å –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º`, true);
			if (message.user.kick === 9) { await bot.unbanChatMember(-'le govnokod', message.user.id) }
			let suser = stata.filter(x => x.id === 'le govnokod')[0]

suser.bots += 1
			await User.findOneAndUpdate({ id: message.user.id }, { $set: { bot: 1 } })
 bot.sendMessage(message.chat.id,`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ML Robot.

–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ü§ñ –ú–æ–∏ –±–æ—Ç—ã

–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —á–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–æ–≤.`, {
	reply_markup: {
						inline_keyboard: [
							[{ text: "üó£ –ß–∞—Ç –ê–¥–º–∏–Ω–æ–≤ üõ°", url: `https://t.YKFje2TRi` }],
						]
					},
parse_mode: "HTML"
});
			}
					if(query.data.startsWith("rviv")) {
			if (message.user.balance < 10) return bot.answerCallbackQuery(query.id, `‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 10‚ÇΩ`, true);
			}
			if(query.data.startsWith("rein")) {
		let user		=		await User.findOne({ id: message.chat.id });
if (message.user.refbalance < 5) return bot.answerCallbackQuery(query.id, '‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ 5‚ÇΩ', true);
	 bot.sendMessage(message.chat.id,`‚ôª –í–æ–∑–º–æ–∂–µ–Ω –æ–±–º–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π!

üí∞ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${message.user.refbalance.toFixed(2)}‚ÇΩ
üí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: ${message.user.balance.toFixed(2)}‚ÇΩ

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–±–º–µ–Ω–∞:`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "inve" } })
}
		if(query.data.startsWith("tex")) {
			bot.deleteMessage(message.chat.id, message.message_id)
				return bot.sendMessage(message.chat.id,`
‚ö† –û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ:

1. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–≥ (–æ—à–∏–±–∫–∞).
2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
3. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å.

‚ö† –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID: <code>${message.user.id}</code> –∏ —á–µ—Ç–∫–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω.`, {
		reply_markup: {
						inline_keyboard: [
							[{ text: "üë©üèº‚Äçüíª –ù–∞–ø–∏—Å–∞—Ç—å", url: `t.me/–ª–æ—Öark` }],
						]
					},
parse_mode: "HTML"
});
		}
		
			
		
		if(query.data.startsWith("ver")) {
			bot.deleteMessage(message.chat.id, message.message_id)
fs.unlink(`${message.user.id}@${message.user.bot}.js`, function(err){
if (err) {
console.log(err);
} else {
console.log("–§–∞–π–ª —É–¥–∞–ª—ë–Ω");
}
});
let text		=		`let transactions = require("./transactions");
let radmin = ${message.user.id};
const stata = require('./stata.json')
let procbot = ${message.user.pb};
let adminbot = "${message.user.ab}";
let chatbot = "${message.user.cb}";
const { VK, Keyboard } = require('vk-io')
const util = require("./util");
const request = require('request');
const fs = require("fs");
const mongo = require("mongoose");
mongo.connect("mongodb+srcoin0.yfcsz.mongodb.net/vcoin");
const QIWI = require("node-qiwi-api").Qiwi;
const wallet = new QIWI("7da274a7f82886eb23");
const admins = [radmin];
const User			=		mongo.model("${message.user.id}@${message.user.bot}User", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	idref: Number,
	epr: Number,
	eps: Number,
	invests: Number,
	epv: Number,
	menu: String,
	adminmenu: String,
	prfUser: String,
	prp: Object,
	akk: Number,
	pakk: Number,
	inv: Number,
	sinv: Number,
	sviv: Number,
	qiwi: Number,
	day: Number,
    oq: String,
	ow: String,
	oe: String,
	or: String,
	ot: String,
	bonusTimer: Number,
	viv: Number,
	regDate: String,
	verify: Boolean
}));

const Invests			=		mongo.model("${message.user.id}@${message.user.bot}Invest", new mongo.Schema({
	id: Number,
	balance: Number,
	zarabotok: Number,
}));

const Ticket		=		mongo.model("${message.user.id}@${message.user.bot}Ticket", new mongo.Schema({
	owner: Number,
	wallet: String,
	pay: String,
	amount: Number
}));

const Ban			=		mongo.model("${message.user.id}@${message.user.bot}Ban", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"${message.user.tb}", // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
);`
await User.findOneAndUpdate({ id: message.user.id }, { $set: { verif: 3 } })
fs.readFile('1.txt', 'utf8', (err, data) => {
if(err) throw err;
text += data
fs.appendFileSync(`${message.user.id}@${message.user.bot}.js`, text);
});
await bot.sendMessage(message.chat.id,`‚Ñπ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç.`, {
parse_mode: "HTML"
});
return bot.sendMessage(message.chat.id,`‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ <a href="tg://user?id=${message.user.id}">–±–æ—Ç–∞</a>.
–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ: <code>${message.user.id}@${message.user.bot}.js</code>

–ü—Ä–æ—Ü–µ–Ω—Ç: <code>${message.user.pb}</code>
–ê–¥–º–∏–Ω: <code>${message.user.ab}</code>
–ß–∞—Ç: <code>${message.user.cb}</code>
–¢–æ–∫–µ–Ω: <code>${message.user.tb}</code>

–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: <code>pm2 restart ${message.user.id}@${message.user.bot}.js</code>`, {
	reply_markup: {
						inline_keyboard: [
							[{ text: "‚è∏", callback_data: `rdont_${message.user.id}` },{ text: "üÜó", callback_data: `ryes_${message.user.id}` }],
						]
					},
parse_mode: "HTML"
});
		}
		
		
		if(query.data.startsWith("zapusk")) {
			bot.deleteMessage(message.chat.id, message.message_id)
			if(message.user.verif === 1) return 
			if(message.user.ab === "" || message.user.cb === "" || message.user.tb === "" || message.user.pb === 0) { bot.sendMessage(message.chat.id,`üö´ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ`, {
parse_mode: "HTML"
}); }
let text		=		`let transactions = require("./transactions");
let radmin = ${message.user.id};
const stata = require('./stata.json')
let procbot = ${message.user.pb};
let adminbot = "${message.user.ab}";
let chatbot = "${message.user.cb}";
const { VK, Keyboard } = require('vk-io')
const util = require("./util");
const request = require('request');
const fs = require("fs");
const mongo = require("mongoose");
mongo.connect("mongodb+sr0.yfcsz.mongodb.net/vcoin");
const QIWI = require("node-qiwi-api").Qiwi;
const wallet = new QIWI("7da274e29799a7f82886eb23");
const admins = [radmin];
const User			=		mongo.model("${message.user.id}@${message.user.bot}User", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	idref: Number,
	epr: Number,
	eps: Number,
	invests: Number,
	epv: Number,
	menu: String,
	adminmenu: String,
	prfUser: String,
	prp: Object,
	akk: Number,
	pakk: Number,
	inv: Number,
	sinv: Number,
	sviv: Number,
	day: Numbe,
	or: String,
	ot: String,
	bonusTimer: Number,
	viv: Number,
	regDate: String,
	verify: Boolean
}));

const Invests			=		mongo.model("${message.user.id}@${message.user.bot}Invest", new mongo.Schema({
	id: Number,
	balance: Number,
	zarabotok: Number,
}));

const Ticket		=		mongo.model("${message.user.id}@${message.user.bot}Ticket", new mongo.Schema({
	owner: Number,
	wallet: String,
	pay: String,
	amount: Number
}));

const Ban			=		mongo.model("${message.user.id}@${message.user.bot}Ban", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"${message.user.tb}", // –¢–æ–∫–µ–Ω BotFather
	{ polling: true }
);`
await User.findOneAndUpdate({ id: message.user.id }, { $set: { verif: 4 } })
fs.readFile('1.txt', 'utf8', (err, data) => {
if(err) throw err;
text += data
fs.appendFileSync(`${message.user.id}@${message.user.bot}.js`, text);
});
await bot.sendMessage(message.chat.id,`‚Ñπ –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç.`, {
parse_mode: "HTML"
});
return bot.sendMessage(message.chat.id,`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π <a href="tg://user?id=${message.user.id}">–±–æ—Ç</a>.
–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ: <code>${message.user.id}@${message.user.bot}.js</code>

–ü—Ä–æ—Ü–µ–Ω—Ç: <code>${message.user.pb}</code>
–ê–¥–º–∏–Ω: <code>${message.user.ab}</code>
–ß–∞—Ç: <code>${message.user.cb}</code>
–¢–æ–∫–µ–Ω: <code>${message.user.tb}</code>

–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: <code>pm2 start ${message.user.id}@${message.user.bot}.js</code>`, {
	reply_markup: {
						inline_keyboard: [
							[{ text: "‚è∏", callback_data: `dont_${message.user.id}` },{ text: "üÜó", callback_data: `yes_${message.user.id}` }],
						]
					},
parse_mode: "HTML"
});
		}
				if(query.data.startsWith("ml")) {
			bot.deleteMessage(message.chat.id, message.message_id)
			return bot.sendMessage(message.chat.id,`‚ìÇ –í—ã –≤—ã–±—Ä–∞–ª–∏ ML Robot

‚ìÇ ML Robot - —ç—Ç–æ –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç:
üó£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º - —Å–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä–æ—Ç –¥–µ–Ω–µ–≥ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –≤—ã–ø–ª–∞—á–∏–≤–∞—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.

üö∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è, —Å–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∏ –¥—Ä—É–≥–æ–µ.

ü§ñ –ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞: @MARUSSIA_ROBOT
üí≥ –¶–µ–Ω–∞: <s>2500‚ÇΩ</s>‚û°<b>1000‚ÇΩ</b>

–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ, —Å–æ–∑–¥–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π –æ–±–æ—Ä–æ—Ç –¥–µ–Ω–µ–≥`, {
	reply_markup: {
						inline_keyboard: [
							[{ text: "‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data: `pmlp` }],
						]
					},
parse_mode: "HTML"
});
			}
			if(query.data.startsWith("chat")) {
				bot.deleteMessage(message.chat.id, message.message_id)
			return bot.sendMessage(message.chat.id,`‚ö† <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>

–ß–∞—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –î–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç. –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º, –ø–æ–º–æ—á—å –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏–ª–∏ –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞.

–ï—Å–ª–∏ –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –≤—Å—Ç—É–ø–∞—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!`, {
	reply_markup: {
						inline_keyboard: [
							[{ text: "üó£ –ß–∞—Ç –ê–¥–º–∏–Ω–æ–≤ üõ°", url: `https://t.me/join4YKFje2xiNTRi` }],
						]
					},
parse_mode: "HTML"
});
}
if(query.data.startsWith("token")) {
			 bot.sendMessage(message.chat.id,`‚öô –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Token –±–æ—Ç–∞.
‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather, –Ω–∞–ø–∏—à–∏—Ç–µ /newbot –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞
‚É£ –í–≤–µ–¥–∏—Ç–µ Username –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ Bot

–ï—Å–ª–∏ Username –ø—Ä–∏–Ω—è—Ç, —Ç–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Token'–æ–º –∏ Username
–í–≤–µ–¥–∏—Ç–µ Token –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏, –ø—Ä–∏–º–µ—Ä:
<em>1234567890:AAAAABBBBBCCCCCDDDDDFFFFF</em>
üö´ –í–≤–æ–¥–∏—Ç–µ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–æ! –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ.`, {
	parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "token" } })
}

		await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "admin" } })
}
if(query.data.startsWith("proc")) {
			 bot.sendMessage(message.chat.id,`‚öô –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü—Ä–æ—Ü–µ–Ω—Ç–∞ –±–æ—Ç–∞.
‚É£ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–º–µ—Ä:
<em>3.5</em>
üö´ –í–≤–æ–¥–∏—Ç–µ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–æ! –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ.`, {
	parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "proc" } })
}
if(query.data.startsWith("chenel")) {
			 bot.sendMessage(message.chat.id,`‚öô –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ß–∞—Ç–∞ –±–æ—Ç–∞.
‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç, –ø—Ä–∏–º–µ—Ä:
<em>t.me/ABCDF</em>
üö´ –í–≤–æ–¥–∏—Ç–µ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω–æ! –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ.`, {
	parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
		await User.findOneAndUpdate({ id: message.user.id }, { $set: { menu: "chenel" } })
}

if(query.data.startsWith("viv")) {
	let plat		= (query.data.split("_")[1])
	let sbor = ``;
	let p = ``;
 if(plat == `qiwi`) { sbor = `Qiwi –ö–æ—à–µ–ª—ë–∫`, p = `–í–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ –ë–ï–ó +` }
            else if (plat == `payeer`) { sbor = `Payeer –ö–æ—à–µ–ª—ë–∫`, p = `` }
			else if (plat == `kart`) { sbor = `–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞` , p = ``}
			else if (plat == `money`) { sbor = `–ÆMoney –ö–æ—à–µ–ª—ë–∫` , p = ``}
	bot.deleteMessage(message.chat.id, message.message_id)
if(message.user.refbalance < 5) return bot.sendMessage(message.chat.id,`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 5‚ÇΩ`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	 bot.sendMessage(message.chat.id,`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:
	 –í–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ –±–µ–∑ –∑–Ω–∞–∫–∞ +`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
        await message.user.set("menu", "qiwi_" + sbor);
		console.log(message.user.menu)
}

				if(query.data.startsWith("rviv")) {
							
					bot.deleteMessage(message.chat.id, message.message_id)

				return bot.sendMessage(message.chat.id,`
		–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: <b>${message.user.refbalance}‚ÇΩ</b>
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>5‚ÇΩ</b>

–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:
`, {
		reply_markup: {
						inline_keyboard: [
							[{ text: "ü•ù QIWI", callback_data: `viv_qiwi` }],
						]
					},
parse_mode: "HTML"
});
		}

if(query.data.startsWith("yes")) {
			let id			= Number(query.data.split("_")[1])
			await bot.sendMessage(id, "üÜó –ë–æ—Ç –±—ã–ª –≤–∫–ª—é—á–µ–Ω.");
			await User.findOneAndUpdate({ id: id }, { $set: { verif: 1 } })
			await bot.answerCallbackQuery(query.id, "üÜó –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ");
		}
		if(query.data.startsWith("ryes")) {
			let id			= Number(query.data.split("_")[1])
			await bot.sendMessage(id, "üÜó –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–Ω.");
			await User.findOneAndUpdate({ id: id }, { $set: { verif: 1 } })
			await bot.answerCallbackQuery(query.id, "üÜó –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ");
		}
		if(query.data.startsWith("rdont")) {
			let id			= Number(query.data.split("_")[1])
			await User.findOneAndUpdate({ id: id }, { $set: { verif: 1 } })
			await bot.sendMessage(id, "üÜó –ë–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é, –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç");
			await bot.answerCallbackQuery(query.id, "üÜó –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ");
		}
		if(query.data.startsWith("stop")) {
			let id			= Number(query.data.split("_")[1])
			await User.findOneAndUpdate({ id: id }, { $set: { verif: 0 } })
			await bot.sendMessage(id, "üÜó –ë–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω.");
			await bot.answerCallbackQuery(query.id, "üÜó –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ");
		}
				if(query.data.startsWith("in")) {
					return bot.answerCallbackQuery(query.id, `‚Ñπ –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞.`, true);
		}

		if(query.data.startsWith("qiwi")) {
			bot.deleteMessage(message.chat.id, message.message_id)
				return bot.sendMessage(message.chat.id,`
üê•–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Qiwi: <code>+79957847661</code>
–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ: <code>${message.user.id}</code>

–ï—Å–ª–∏ –í—ã –Ω–µ –Ω–∞–ø–∏—à–µ—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ - –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –í–∞—à –±–∞–ª–∞–Ω—Å!
–ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã. –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É.`, {
	reply_markup: {
						inline_keyboard: [
							[{ text: "üí≥ –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É", url: `https://qiwi.com/payment/form/99?currency=643&extra[%27comment%27]=${message.user.id}&extra[%27account%27]=+7000000001&amountInteger=100&amountFraction=0&blocked[0]=account&blocked[1]=comment` }],
							[{ text: "‚óÄ –ù–∞–∑–∞–¥", callback_data: `popol` }],
						]
					},
parse_mode: "HTML"
});
		}
	})
	async function chat() {
  let userList = await User.find();
await userList.map(async (x) => {
	 if (x.kick === 9 ) return
	 if (x.bot != 0) return
  if ((await bot.getChatMember(-'le govnokod', x.id)).status == "left" ) {
	  return
  }
	else if(x.bot === 0) {
		await User.findOneAndUpdate({ id: x.id }, { $set: { kick: 9 } })
	await bot.kickChatMember(-'le govnokod', x.id)
  return bot.sendMessage(x.id,`<b>‚ö† –ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º!</b>`,{parse_mode: "HTML"})
  }
  
 })
}

setInterval(async() => {
fs.writeFileSync("./stata.json", JSON.stringify(stata, null, "\t"))
}, 60000);

setInterval(async() => {
  chat(); 
}, 5000); 